// Code generated by MockGen. DO NOT EDIT.
// Source: user\credential\credential.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	credential "github.com/team-gleam/kiwi-basket/server/src/domain/model/user/credential"
	token "github.com/team-gleam/kiwi-basket/server/src/domain/model/user/token"
	username "github.com/team-gleam/kiwi-basket/server/src/domain/model/user/username"
)

// MockICredentialRepository is a mock of ICredentialRepository interface.
type MockICredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICredentialRepositoryMockRecorder
}

// MockICredentialRepositoryMockRecorder is the mock recorder for MockICredentialRepository.
type MockICredentialRepositoryMockRecorder struct {
	mock *MockICredentialRepository
}

// NewMockICredentialRepository creates a new mock instance.
func NewMockICredentialRepository(ctrl *gomock.Controller) *MockICredentialRepository {
	mock := &MockICredentialRepository{ctrl: ctrl}
	mock.recorder = &MockICredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICredentialRepository) EXPECT() *MockICredentialRepositoryMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockICredentialRepository) Append(arg0 credential.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockICredentialRepositoryMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockICredentialRepository)(nil).Append), arg0)
}

// Remove mocks base method.
func (m *MockICredentialRepository) Remove(arg0 username.Username) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockICredentialRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockICredentialRepository)(nil).Remove), arg0)
}

// Exists mocks base method.
func (m *MockICredentialRepository) Exists(arg0 token.Token) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockICredentialRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockICredentialRepository)(nil).Exists), arg0)
}

// GetByToken mocks base method.
func (m *MockICredentialRepository) GetByToken(arg0 token.Token) (credential.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", arg0)
	ret0, _ := ret[0].(credential.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockICredentialRepositoryMockRecorder) GetByToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockICredentialRepository)(nil).GetByToken), arg0)
}

// GetByUsername mocks base method.
func (m *MockICredentialRepository) GetByUsername(arg0 username.Username) (credential.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0)
	ret0, _ := ret[0].(credential.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockICredentialRepositoryMockRecorder) GetByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockICredentialRepository)(nil).GetByUsername), arg0)
}
