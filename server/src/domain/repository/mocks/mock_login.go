// Code generated by MockGen. DO NOT EDIT.
// Source: user\login\login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	login "github.com/team-gleam/kiwi-basket/server/src/domain/model/user/login"
	username "github.com/team-gleam/kiwi-basket/server/src/domain/model/user/username"
)

// MockILoginRepository is a mock of ILoginRepository interface.
type MockILoginRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILoginRepositoryMockRecorder
}

// MockILoginRepositoryMockRecorder is the mock recorder for MockILoginRepository.
type MockILoginRepositoryMockRecorder struct {
	mock *MockILoginRepository
}

// NewMockILoginRepository creates a new mock instance.
func NewMockILoginRepository(ctrl *gomock.Controller) *MockILoginRepository {
	mock := &MockILoginRepository{ctrl: ctrl}
	mock.recorder = &MockILoginRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginRepository) EXPECT() *MockILoginRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILoginRepository) Create(arg0 login.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILoginRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILoginRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockILoginRepository) Delete(arg0 login.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockILoginRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockILoginRepository)(nil).Delete), arg0)
}

// Exists mocks base method.
func (m *MockILoginRepository) Exists(arg0 username.Username) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockILoginRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockILoginRepository)(nil).Exists), arg0)
}

// Get mocks base method.
func (m *MockILoginRepository) Get(arg0 username.Username) (login.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(login.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockILoginRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockILoginRepository)(nil).Get), arg0)
}
